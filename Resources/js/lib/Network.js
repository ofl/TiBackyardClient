// Generated by CoffeeScript 1.4.0
(function() {
  var Network, utils;

  utils = require('js/lib/utils');

  Network = (function() {

    function Network(option) {
      var that, _error, _onreadystatechange, _progress, _success;
      _success = option.success || function() {};
      _error = option.error || function(status, errors) {
        console.log("" + status + ":" + (errors.join(',')));
      };
      _progress = option.progress || function() {};
      _onreadystatechange = option.onreadystatechange || function() {};
      this.indicator = option.indicator || {
        show: function() {},
        hide: function() {}
      };
      this.xhr = Ti.Network.createHTTPClient();
      this.xhr.setTimeout(5000);
      this.xhr.onload = function() {
        var status_code;
        try {
          status_code = that.xhr.status;
          console.log(this.responseText);
          if (status_code !== 204) {
            _success(status_code, JSON.parse(this.responseText));
          } else {
            _success(status_code, {});
          }
        } catch (err) {
          console.log(err);
          _error(null, {
            success: false,
            errors: [err.message]
          });
        } finally {
          that.indicator.hide();
          that.release();
        }
      };
      this.xhr.onerror = function(e) {
        var json, status_code;
        console.log(e.error);
        try {
          status_code = that.xhr.status;
          if (status_code) {
            json = JSON.parse(this.responseText);
          } else {
            json = {
              success: false,
              errors: [e.error]
            };
          }
          _error(status_code, json);
        } catch (err) {
          console.log(err);
          _error(null, {
            success: false,
            errors: [err.message]
          });
        } finally {
          that.indicator.hide();
          that.release();
        }
      };
      this.xhr.ondatastream = function(e) {
        _progress.call(this, e);
      };
      this.xhr.onreadystatechange = function(e) {
        _onreadystatechange.call(this, e);
      };
      that = this;
      return;
    }

    Network.prototype.requestGet = function(url, data) {
      this.xhr.open('GET', utils.createGetReguestUrl(url, data));
      this.xhr.send();
    };

    Network.prototype.requestPost = function(url, data, method) {
      this.xhr.open('POST', url);
      if (method !== 'POST') {
        this.xhr.setRequestHeader("X-Http-Method-Override", method);
      }
      this.xhr.setRequestHeader("content-type", "application/json");
      this.xhr.send(JSON.stringify(data));
    };

    Network.prototype.requestDownload = function(url, path) {
      var file;
      this.xhr.setTimeout(30000);
      file = Titanium.Filesystem.getFile(path);
      if (!file.exists()) {
        this.xhr.open('GET', url, false);
        this.xhr.setFile(path);
        this.xhr.send();
      }
    };

    Network.prototype.request = function(method, url, data) {
      if (!Ti.Network.online) {
        this.release();
        alert('Network is not connected.');
        return;
      }
      this.indicator.show();
      switch (method) {
        case 'POST':
        case 'PUT':
        case 'DELETE':
          this.requestPost(url, data, method);
          break;
        case 'DOWNLOAD':
          this.requestDownload(url, path);
          break;
        default:
          this.requestGet(url, data);
      }
    };

    Network.prototype.release = function() {
      this.xhr.onload = null;
      this.xhr.onerror = null;
      this.xhr.ondatastream = null;
      this.xhr.onreadystatechange = null;
      this.xhr = null;
    };

    Network.prototype.disconnect = function() {
      this.xhr.abort();
      this.release();
      this.indicator.hide();
    };

    return Network;

  })();

  module.exports = Network;

}).call(this);
