// Generated by CoffeeScript 1.4.0
(function() {
  var Network, utils;

  utils = require('js/lib/utils');

  Network = (function() {

    function Network(option) {
      var that, _error, _onreadystatechange, _progress, _responseToObject, _success;
      _success = option.success || function() {};
      _error = option.error || function(status, errors) {
        console.log("" + status + ":" + errors);
      };
      _progress = option.progress || function() {};
      _onreadystatechange = option.onreadystatechange || function() {};
      this.indicator = option.indicator || {
        show: function() {},
        hide: function() {}
      };
      _responseToObject = function(that) {
        var contentType, data;
        data = null;
        contentType = that.xhr.getResponseHeader('Content-Type');
        if (contentType.indexOf('application/json') === 0) {
          data = JSON.parse(this.responseText);
        } else if (contentType.indexOf('application/xml') === 0) {
          data = {
            xml: this.responseXML
          };
        } else if (contentType.indexOf('text') === 0) {
          data = {
            text: this.responseText
          };
        } else {
          data = {
            data: this.responseData
          };
        }
        return data;
      };
      this.xhr = Ti.Network.createHTTPClient();
      this.xhr.setTimeout(10000);
      this.xhr.onload = function() {
        var status_code;
        try {
          status_code = that.xhr.status;
          if (status_code !== 204) {
            _success(status_code, _responseToObject.call(this, that));
          } else {
            _success(status_code, {});
          }
        } catch (err) {
          console.log(err);
          _error(null, {
            success: false,
            errors: [err.message]
          });
        } finally {
          that.indicator.hide();
          that.release();
        }
      };
      this.xhr.onerror = function(e) {
        console.log(e.error);
        if (e.error === 'HTTP error') {
          try {
            _error(that.xhr.status, _responseToObject.call(this, that));
          } catch (err) {
            console.log(err);
            _error(null, {
              success: false,
              errors: [err.message]
            });
          } finally {
            that.indicator.hide();
            that.release();
          }
        } else {
          _error(null, {
            success: false,
            errors: [e.error]
          });
        }
      };
      this.xhr.ondatastream = function(e) {
        _progress.call(this, e);
      };
      this.xhr.onreadystatechange = function(e) {
        _onreadystatechange.call(this, e);
      };
      that = this;
      return;
    }

    Network.prototype.requestGet = function(url, data) {
      this.xhr.open('GET', utils.createGetReguestUrl(url, data));
      this.xhr.send();
    };

    Network.prototype.requestPost = function(url, data, method) {
      this.xhr.open('POST', url);
      if (method !== 'POST') {
        this.xhr.setRequestHeader("X-Http-Method-Override", method);
      }
      this.xhr.setRequestHeader("Content-Type", "application/json");
      this.xhr.send(JSON.stringify(data));
    };

    Network.prototype.requestUpload = function(url, data) {
      this.xhr.open('POST', url);
      this.xhr.send(data);
    };

    Network.prototype.requestDownload = function(url, path) {
      var file;
      this.xhr.setTimeout(30000);
      file = Titanium.Filesystem.getFile(path);
      if (!file.exists()) {
        this.xhr.open('GET', url, false);
        this.xhr.setFile(path);
        this.xhr.send();
      }
    };

    Network.prototype.request = function(method, url, data) {
      if (!Ti.Network.online) {
        this.release();
        alert('Network is not connected.');
        return;
      }
      this.indicator.show();
      switch (method) {
        case 'POST':
        case 'PUT':
        case 'DELETE':
          this.requestPost(url, data, method);
          break;
        case 'UPLOAD':
          this.requestUpload(url, data);
          break;
        case 'DOWNLOAD':
          this.requestDownload(url, path);
          break;
        default:
          this.requestGet(url, data);
      }
    };

    Network.prototype.release = function() {
      this.xhr.onload = null;
      this.xhr.onerror = null;
      this.xhr.ondatastream = null;
      this.xhr.onreadystatechange = null;
      this.xhr = null;
    };

    Network.prototype.disconnect = function() {
      this.xhr.abort();
      this.release();
      this.indicator.hide();
    };

    return Network;

  })();

  module.exports = Network;

}).call(this);
